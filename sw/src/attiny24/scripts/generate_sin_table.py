#!/usr/bin/python
import math

sin_l = []
sin_ampl = 127
spr = 200
_theta=1.8
microstep = 64
lut_in_flash = True

for a in range(3601):
    _sin = round(math.sin(a * 3.1415 / 180 / 10.0) * sin_ampl)
    sin_l.append(int(_sin))

print("Array values:")
print(sin_l)




_def_phase = 4
phase = 4 * microstep

phase_multiplier = 10 * spr / 4
print("Parameters: spr=" + str(spr) + " theta=" + str(_theta))

out_sin_val = []
for i in range(0,phase):
    theta = (i*_theta/microstep)
    print("Step angle: " + str(theta)),
    tmp_angle_1 = int(phase_multiplier * theta)
    tmp_angle_2 = tmp_angle_1 + 900
    angle_1 = (tmp_angle_1 % 3600 + 3600) % 3600
    angle_2 = (tmp_angle_2 % 3600 + 3600) % 3600

    sin_coil_1 = sin_l[angle_1]
    sin_coil_2 = sin_l[angle_2]

    print("Sins:"),
    print(sin_coil_1),
    print(sin_coil_2)

    out_sin_val.append(sin_coil_1)

print("Generate c LUT file:")
f = open("sin_lut_microstep_" + str(microstep) + ".c", "w")
g = open("sin_lut_microstep_" + str(microstep) + ".h", "w")

g.write("#ifndef SIN_LUT_MICROSTEP_" + str(microstep) + "\n")
g.write("#define SIN_LUT_MICROSTEP_" + str(microstep) + "\n\n")
if lut_in_flash == True:
    g.write("#include <avr/pgmspace.h>\n")
g.write("#define POS_OFFSET " + str(microstep) + "\n")
g.write("#define SIN_MAX_VALUE " + str(sin_ampl) + "\n")
g.write("#define SIN_LUT_LEN " + str(len(out_sin_val)) + "\n")
g.write("\nextern const uint16_t sin_lut[SIN_LUT_LEN]")
if lut_in_flash == True:
    g.write(" PROGMEM;\n\n")
else:
    g.write(";\n\n")
g.write("#endif\n\n")

f.write("//This is autogenerated, don't edit the content!\n")
f.write("//params: spr: " + str(spr) + " theta: " + str(_theta) + " microstep: " + str(microstep) + "\n")
f.write("#include \"stdint.h\"\n")
f.write("#include \"sin_lut_microstep_" + str(microstep) + ".h\"\n")

f.write("const uint16_t sin_lut[SIN_LUT_LEN]")
if lut_in_flash == True:
    f.write(" PROGMEM = {\n")
else:
    f.write(" = {\n")
perline = 10
count = 1
for val in out_sin_val:
    if count != 1:
        f.write(",")
    f.write(str(val))
    if count % perline == 0:
        f.write("\n")
    count = count + 1
f.write("};\n\n")

f.close()
g.close()
